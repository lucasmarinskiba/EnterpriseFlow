import streamlit as st
import pandas as pd
import numpy as np
from fpdf import FPDF
import spacy
from spacy import displacy
import pdfplumber
from PyPDF2 import PdfReader
from docx import Document
from openpyxl import load_workbook
from pptx import Presentation
import os
import time
import logging
from datetime import datetime
import hashlib

# ===================== üõ†Ô∏è CONFIGURACI√ìN PROFESIONAL =====================
# Configuraci√≥n de logging
logging.basicConfig(
    filename='app.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Cacheo de recursos pesados (optimizaci√≥n)
@st.cache_resource
def load_nlp_model():
    """Carga el modelo de spaCy con manejo robusto de errores"""
    try:
        nlp = spacy.load("en_core_web_sm")
        logging.info("Modelo spaCy cargado desde cach√©")
        return nlp
    except (OSError, IOError):
        logging.warning("Descargando modelo spaCy...")
        from spacy.cli import download
        try:
            download("en_core_web_sm")
            nlp = spacy.load("en_core_web_sm")
            logging.info("Modelo descargado y cargado exitosamente")
            return nlp
        except Exception as e:
            logging.error(f"Error cr√≠tico al cargar modelo: {str(e)}")
            st.error("‚ùå Error cr√≠tico: No se pudo cargar el motor de NLP")
            st.stop()

nlp = load_nlp_model()

# ===================== ü§ñ AUTOMATIZACIONES CLAVE =====================
def auto_save_report(content, analysis):
    """Autoguardado seguro de reportes con timestamp √∫nico"""
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"report_{timestamp}_{hashlib.md5(content.encode()).hexdigest()[:6]}.pdf"
        
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        
        # Contenido estructurado
        pdf.cell(200, 10, txt="EnterpriseFlow - Reporte Autom√°tico", ln=1, align='C')
        pdf.multi_cell(0, 10, txt=content[:5000])  # Limitar contenido
        
        # An√°lisis en formato tabla
        pdf.ln(10)
        pdf.cell(0, 10, txt="An√°lisis NLP:", ln=1)
        for section, data in analysis.items():
            pdf.cell(0, 10, txt=f"{section.capitalize()}:", ln=1)
            pdf.multi_cell(0, 10, txt="\n".join([str(item) for item in data[:20]]))  # Limitar items
            
        pdf.output(filename)
        logging.info(f"Reporte autoguardado: {filename}")
        return filename
    except Exception as e:
        logging.error(f"Error en auto_save: {str(e)}")
        return None

def background_processing(file):
    """Procesamiento en segundo plano con barra de progreso"""
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    # Simulaci√≥n de procesamiento complejo
    for percent in range(0, 101, 10):
        time.sleep(0.1)  # Tarea simulada
        progress_bar.progress(percent)
        status_text.text(f"Procesando... {percent}%")
    
    # Procesamiento real
    try:
        # Tu l√≥gica de procesamiento aqu√≠
        result = process_file(file)
        return result
    except Exception as e:
        logging.error(f"Error en background_processing: {str(e)}")
        st.error("Error durante el procesamiento")
    finally:
        progress_bar.empty()
        status_text.empty()

# ===================== üßò FUNCIONALIDADES DE BIENESTAR =====================
def system_health_check():
    """Monitoreo de recursos del sistema"""
    st.sidebar.subheader("üßò Bienestar del Sistema")
    
    # M√©tricas simuladas (en producci√≥n usar psutil)
    health_data = {
        "RAM usage": "75%",
        "CPU load": "30%",
        "Active threads": "8",
        "Uptime": "2h 15m"
    }
    
    st.sidebar.write("**Estado del Sistema:**")
    for metric, value in health_data.items():
        st.sidebar.metric(metric, value)
    
    if st.sidebar.button("üîÑ Optimizar Recursos"):
        with st.spinner("Optimizando..."):
            time.sleep(1.5)
            st.sidebar.success("Recursos optimizados ‚úÖ")

def user_activity_tracking(func):
    """Decorador para tracking de actividad de usuario"""
    def wrapper(*args, **kwargs):
        user_ip = st.experimental_get_query_params().get("client_ip", ["unknown"])[0]
        logging.info(f"Usuario {user_ip} accedi√≥ a {func.__name__}")
        return func(*args, **kwargs)
    return wrapper

# ===================== üöÄ FUNCI√ìN MAIN MEJORADA =====================
@user_activity_tracking
def main():
    # Configuraci√≥n inicial
    st.set_page_config(
        page_title="EnterpriseFlow Pro",
        page_icon="üöÄ",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Sistema de bienestar
    system_health_check()
    
    # Interfaz principal
    st.title("üöÄ EnterpriseFlow Pro")
    st.markdown("### Procesamiento Inteligente con Automatizaciones")
    
    # Carga de archivos con validaci√≥n
    with st.sidebar:
        st.header("üì§ Carga de Documentos")
        uploaded_files = st.file_uploader(
            "Arrastra tus archivos aqu√≠",
            type=["pdf", "docx", "xlsx", "pptx", "txt"],
            accept_multiple_files=True,
            help="M√°ximo 10 archivos de 50MB cada uno"
        )
    
    # Procesamiento autom√°tico
    if uploaded_files:
        for file in uploaded_files:
            with st.expander(f"üìÑ {file.name}", expanded=True):
                col1, col2 = st.columns([1, 3])
                
                with col1:
                    # Panel de metadata avanzada
                    st.subheader("üîç Metadatos Avanzados")
                    file_details = {
                        "Nombre": file.name,
                        "Tipo": file.type.split('/')[-1].upper(),
                        "Tama√±o": f"{len(file.getvalue()) / 1024:.2f} KB",
                        "Hash MD5": hashlib.md5(file.getvalue()).hexdigest()[:8]
                    }
                    st.json(file_details)
                    
                    if st.button("‚ö° Procesar R√°pido", key=f"process_{file.name}"):
                        result = background_processing(file)
                
                with col2:
                    # Secci√≥n de an√°lisis interactivo
                    st.subheader("üß† An√°lisis Inteligente")
                    content = process_file(file)
                    
                    if content:
                        tab1, tab2, tab3, tab4 = st.tabs(["üìù Contenido", "üìä An√°lisis", "üìà Insights", "‚öôÔ∏è Acciones"])
                        
                        with tab1:
                            st.markdown("**Texto Extra√≠do:**")
                            st.text_area("", value=content[:3000], height=200, key=f"content_{file.name}")
                        
                        with tab2:
                            analysis = analyze_text(content)
                            st.dataframe(pd.DataFrame.from_dict(analysis, orient='index').T)
                        
                        with tab3:
                            st.plotly_chart(generate_visualizations(analysis))
                        
                        with tab4:
                            if st.button("üíæ AutoGuardar Reporte"):
                                report_path = auto_save_report(content, analysis)
                                if report_path:
                                    st.success(f"Reporte guardado como {report_path}")
                                    with open(report_path, "rb") as f:
                                        st.download_button("‚¨áÔ∏è Descargar Reporte", f, file_name=report_path)
    
    # Footer profesional
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666; font-size: 0.9em;">
        üõ°Ô∏è EnterpriseFlow Pro v2.0 | üîç Auditor√≠a Automatizada | üìä NLP Avanzado
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
